/**
 * 	Description	: Gradle build file
 * 	Author		: Sanjeev
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id("org.springframework.boot") version "2.6.6"
    id("org.springdoc.openapi-gradle-plugin") version "1.3.4"
}

apply plugin: 'application'
apply plugin: 'eclipse'

mainClassName = 'sanrockzz.gradledemo.main.GradleDemoMain'
version = '1.0'

repositories {
    mavenCentral()
}


sourceCompatibility = 1.11
targetCompatibility = 1.11

configurations {
    testCompile
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.0'
    implementation 'org.json:json:20220320'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9';

    implementation 'org.springframework.ws:spring-ws-core:3.1.3'
    implementation 'org.springframework:spring-oxm:5.3.20'

    implementation 'org.springframework.kafka:spring-kafka:2.8.5'
    compileOnly "org.projectlombok:lombok:$lombok"
    annotationProcessor "org.projectlombok:lombok:$lombok"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jmockit:jmockit:1.49'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.0'
    /**
    testImplementation("org.mock-server:mockserver-client-java-no-dependencies:5.13.2") {
        exclude("");
    }*/

    testCompileOnly "org.projectlombok:lombok:$lombok"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok"
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'sanrockzz.gradledemo.main.GradleDemoMain'
        )
    }
}

tasks.named('build') {
    doLast {
        println "Copying deps -> lib..."
        copy {
            from configurations.compileClasspath
            into "$buildDir/lib"
        }

        println "Copying Dockerfile to build"
        copy {
            from "./Dockerfile"
            into "$buildDir"
        }

        println "Copying libs -> lib..."
        copy {
            from "$buildDir/libs"
            into "$buildDir/lib"
        }
    }
}

test {
    //useJUnitPlatform()
     testLogging {
        events "passed", "skipped", "failed"
    }
}

openApi {
    apiDocsUrl.set("http://localhost:1000/v3/api-docs")
}

